mod_lm <- linear_regression(pp, combined)
mod_knn <- knn(pp, combined)
a <- [1, NA, 2]
a <- c(1, NA, 2)
a <- drop_na(a)
source("models.R")
mod_knn <- knn(pp, combined)
mod_rf = random_forest(pp, combined)
source("models.R")
mod_lm <- linear_regression(pp, combined)
mod_knn <- knn(pp, combined)
mod_rf = random_forest(pp, combined)
source("models.R")
mod_rf = random_forest(pp, combined)
mod_rf
source("load_packages.R")
packages <- c("jsonlite", "leaflet", "osmdata", "sf", 'tidyverse', 'influxdbclient', 'doParallel')
load_packages(packages)
source("get_data.R")
source("models.R")
source("data_cleaning.R")
predictors <- colnames(combined)
formula_local <- as.formula(paste("temperature", '~', paste(predictors, collapse = "+")))
pp <- recipes::recipe(formula_local, data = combined) |>
recipes::step_YeoJohnson(recipes::all_numeric(), -recipes::all_outcomes()) |>
recipes::step_center(recipes::all_numeric(), recipes::all_outcomes()) |>
recipes::step_scale(recipes::all_numeric(), recipes::all_outcomes())
mod_lm <- linear_regression(pp, combined)
mod_knn <- knn(pp, combined)
mod_rf = random_forest(pp, combined)
mod_knn
mod_rf
split_data <- train_test_split(combined, seed = 123)
source("models.R")
split_data <- train_test_split(combined, seed = 123)
source("models.R")
split_data <- train_test_split(combined, seed = 123)
train_data <- result$train
test_data <- result$test
train_data
source("models.R")
split_data <- train_test_split(combined, seed = 123)
train_data <- result$train
test_data <- result$test
source("models.R")
split_data <- train_test_split(combined, seed = 123)
train_data <- split_data$train
test_data <- split_data$test
mod_lm <- linear_regression(pp, train_data)
train_data
View(test_data)
View(combined)
View(split_data)
source("models.R")
split_data <- train_test_split(combined, seed = 123)
train_data <- split_data$train
test_data <- split_data$test
View(test_data)
mod_lm <- linear_regression(pp, train_data)
mod_knn <- knn(pp, train_data)
mod_rf = random_forest(pp, train_data)
mod_lm
mod_knn
mod_rf
y = train_data[temperature]
View(test_data)
y = test_data["temperature"]
source("load_packages.R")
packages <- c("jsonlite", "leaflet", "osmdata", "sf", 'tidyverse', 'influxdbclient', 'doParallel', 'Metrics')
load_packages(packages)
y <- test_data["temperature"]
y_pred <- predict(mod_lm, test_data)
print(rmse(y, y_pred))
y
y_pred
class(y)
class(y_pred)
y <- test_data["temperature"]
y_pred <- predict(mod_lm, test_data)
print(rmse(numeric(y), y_pred))
y <- test_data$temperature
y_pred <- predict(mod_lm, test_data)
print(rmse(y, y_pred))
y <- test_data$temperature
y_pred <- predict(mod_lm, test_data)
print(paste("RMSE: ", rmse(y, y_pred)))
print(paste("MAE:" , mae(y, y_pred)))
print(paste("R^2: ", cor(y, y_pred) ^ 2))
y <- test_data$temperature
y_pred <- predict(mod_lm, test_data)
print("Linear Regression: ")
print(paste("RMSE: ", rmse(y, y_pred)))
print(paste("MAE:" , mae(y, y_pred)))
print(paste("R^2: ", cor(y, y_pred) ^ 2))
y_pred <- predict(mod_knn, test_data)
y <- test_data$temperature
y_pred <- predict(mod_lm, test_data)
print("Linear Regression: ")
print(paste("RMSE: ", rmse(y, y_pred)))
print(paste("MAE:" , mae(y, y_pred)))
print(paste("R^2: ", cor(y, y_pred) ^ 2))
y_pred <- predict(mod_knn, test_data)
y_pred <- predict(mod_rf, test_data)
print("Random Forest: ")
print(paste("RMSE: ", rmse(y, y_pred)))
print(paste("MAE:" , mae(y, y_pred)))
print(paste("R^2: ", cor(y, y_pred) ^ 2))
y_pred <- predict(mod_lm, test_data)
print("Linear Regression: ")
print(paste("RMSE: ", rmse(y, y_pred)))
print(paste("MAE:" , mae(y, y_pred)))
print(paste("R^2: ", cor(y, y_pred) ^ 2))
y_pred <- predict(mod_knn, test_data)
install.packages("shiny")
install.packages("shiny")
library(shiny); runApp('shiny_test.R')
runApp('shiny_test.R')
runApp('shiny_test.R')
runApp('shiny_test.R')
source("C:/Users/giub/Desktop/Thunometer/app.R")
source("load_packages.R")
packages <- c("jsonlite", "leaflet", "osmdata", "sf", 'tidyverse', 'influxdbclient', 'doParallel', 'Metrics', 'shiny')
load_packages(packages)
source("get_data.R")
# Extract last temperature value from results
latest_temperatures <- result %>%
group_by(Log_NR) %>%
summarise(Last_Temperature = round(last(temperature), digits = 2)) |>
arrange(Log_NR)
# Show measurements on a map
offline_stations <- c()
meta_1 <- as.tibble(read_delim('Messnetz_Thun_Steffisburg_Uebersicht.csv', delim = ';'))
meta_1 <- subset(meta_1, select = -c(Nr_Strassenlaterne, LCZ))
meta_1$Log_NR <- as.numeric(meta_1$Log_NR)
meta_2 <- as.tibble(read_delim('MetadatenBern.csv', delim = ','))
meta_2 <- rename(meta_2, NORD_CHTOPO = Latitude)
meta_2 <- rename(meta_2, OST_CHTOPO = Longitude)
meta_2 <- subset(meta_2, select = -c(STANDORT_NEU, Doppel_Messnetz_23, New))
meta_2$Log_NR <- as.numeric(meta_2$Log_NR)
meta <- bind_rows(meta_1, meta_2)
for (log_nr in meta$Log_NR)
if (!(log_nr %in% result$Log_NR) && !(log_nr %in% offline_stations))
offline_stations <- c(offline_stations, log_nr)
offline_meta <- meta %>%
filter(Log_NR %in% offline_stations) |>
arrange(Log_NR)
online_meta <- meta %>%
filter(!(Log_NR %in% offline_stations)) |>
arrange(Log_NR)
bbox <- list(min_lon = 7.583333, min_lat = 46.716667, max_lon = 7.65, max_lat = 46.766667)
pal <- colorNumeric(palette = c("blue", "lightblue", "white", "orange", "red"), domain = latest_temperatures$Last_Temperature)
leaflet() |>
addTiles() |>
fitBounds(lng1 = bbox$min_lon, lat1 = bbox$min_lat, lng2 = bbox$max_lon, lat2 = bbox$max_lat) |>
addCircleMarkers(
data = online_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~paste(latest_temperatures$Last_Temperature, "°C"),
radius = 6,
color = "black",
fillColor = ~pal(latest_temperatures$Last_Temperature),
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2) |>
addLegend(
pal = pal,
values = latest_temperatures$Last_Temperature,
opacity = 0.7,
title = "Temperatur (°C)",
position = "topright") |>
addCircleMarkers(
data = offline_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~Log_NR,
radius = 4,
color = "black",
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2)
source("load_packages.R")
packages <- c("jsonlite", "leaflet", "osmdata", "sf", 'tidyverse', 'influxdbclient', 'doParallel', 'Metrics', 'shiny')
load_packages(packages)
source("get_data.R")
# Extract last temperature value from results
latest_temperatures <- result %>%
group_by(Log_NR) %>%
summarise(Last_Temperature = round(last(temperature), digits = 2)) |>
arrange(Log_NR)
# Show measurements on a map
offline_stations <- c()
meta_1 <- as.tibble(read_delim('Messnetz_Thun_Steffisburg_Uebersicht.csv', delim = ';'))
meta_1 <- subset(meta_1, select = -c(Nr_Strassenlaterne, LCZ))
meta_1$Log_NR <- as.numeric(meta_1$Log_NR)
meta_2 <- as.tibble(read_delim('MetadatenBern.csv', delim = ','))
meta_2 <- rename(meta_2, NORD_CHTOPO = Latitude)
meta_2 <- rename(meta_2, OST_CHTOPO = Longitude)
meta_2 <- subset(meta_2, select = -c(STANDORT_NEU, Doppel_Messnetz_23, New))
meta_2$Log_NR <- as.numeric(meta_2$Log_NR)
meta <- bind_rows(meta_1, meta_2)
for (log_nr in meta$Log_NR)
if (!(log_nr %in% result$Log_NR) && !(log_nr %in% offline_stations))
offline_stations <- c(offline_stations, log_nr)
offline_meta <- meta %>%
filter(Log_NR %in% offline_stations) |>
arrange(Log_NR)
online_meta <- meta %>%
filter(!(Log_NR %in% offline_stations)) |>
arrange(Log_NR)
bbox <- list(min_lon = 7.583333, min_lat = 46.716667, max_lon = 7.65, max_lat = 46.766667)
pal <- colorNumeric(palette = c("blue", "lightblue", "white", "orange", "red"), domain = latest_temperatures$Last_Temperature)
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() |>
addTiles() |>
fitBounds(lng1 = bbox$min_lon, lat1 = bbox$min_lat, lng2 = bbox$max_lon, lat2 = bbox$max_lat) |>
addCircleMarkers(
data = online_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~paste(latest_temperatures$Last_Temperature, "°C"),
radius = 6,
color = "black",
fillColor = ~pal(latest_temperatures$Last_Temperature),
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2) |>
addLegend(
pal = pal,
values = latest_temperatures$Last_Temperature,
opacity = 0.7,
title = "Temperatur (°C)",
position = "topright") |>
addCircleMarkers(
data = offline_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~Log_NR,
radius = 4,
color = "black",
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2)
})
}
runApp()
View(meta)
runApp()
View(latest_temperatures)
runApp()
View(online_meta)
runApp()
runApp()
View(meta)
meta <- meta |>
select(c("Log_NR", "NORD_CHTOPO", "OST_CHTOPO"))
View(meta)
for (log_nr in meta$Log_NR)
if (!(log_nr %in% result$Log_NR) && !(log_nr %in% offline_stations))
offline_stations <- c(offline_stations, log_nr)
offline_meta <- meta |>
filter(Log_NR %in% offline_stations)
online_meta <- meta |>
filter(!(Log_NR %in% offline_stations))
View(online_meta)
online_meta <- merge(online_meta, latest_temperatures, by = "Log_NR")
View(online_meta)
bbox <- list(min_lon = 7.583333, min_lat = 46.716667, max_lon = 7.65, max_lat = 46.766667)
pal <- colorNumeric(palette = c("blue", "lightblue", "white", "orange", "red"), domain = online_meta$Last_Temperature)
ui <- fluidPage(
leafletOutput("mymap")
)
server <- function(input, output, session) {
output$mymap <- renderLeaflet({
leaflet() |>
addTiles() |>
fitBounds(lng1 = bbox$min_lon, lat1 = bbox$min_lat, lng2 = bbox$max_lon, lat2 = bbox$max_lat) |>
addCircleMarkers(
data = online_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~paste(~Last_Temperature, "°C"),
radius = 6,
color = "black",
fillColor = ~pal(Last_Temperature),
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2) |>
addLegend(
pal = pal,
values = ~Last_Temperature,
opacity = 0.7,
title = "Temperatur (°C)",
position = "topright") |>
addCircleMarkers(
data = offline_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~Log_NR,
radius = 4,
color = "black",
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2)
})
}
shinyApp(ui, server)
leaflet() |>
addTiles() |>
fitBounds(lng1 = bbox$min_lon, lat1 = bbox$min_lat, lng2 = bbox$max_lon, lat2 = bbox$max_lat) |>
addCircleMarkers(
data = online_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~paste(~Last_Temperature, "°C"),
radius = 6,
color = "black",
fillColor = ~pal(Last_Temperature),
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2) |>
addLegend(
pal = pal,
values = ~Last_Temperature,
opacity = 0.7,
title = "Temperatur (°C)",
position = "topright") |>
addCircleMarkers(
data = offline_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~Log_NR,
radius = 4,
color = "black",
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2)
leaflet() |>
addTiles() |>
fitBounds(lng1 = bbox$min_lon, lat1 = bbox$min_lat, lng2 = bbox$max_lon, lat2 = bbox$max_lat) |>
addCircleMarkers(
data = online_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~paste(Last_Temperature, "°C"),
radius = 6,
color = "black",
fillColor = ~pal(Last_Temperature),
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2) |>
addLegend(
pal = pal,
values = ~Last_Temperature,
opacity = 0.7,
title = "Temperatur (°C)",
position = "topright") |>
addCircleMarkers(
data = offline_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~Log_NR,
radius = 4,
color = "black",
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2)
runApp()
source("load_packages.R")
packages <- c("jsonlite", "leaflet", "osmdata", "sf", 'tidyverse', 'influxdbclient', 'doParallel', 'Metrics', 'shiny')
load_packages(packages)
source("get_data.R")
# Extract last temperature value from results
latest_temperatures <- result %>%
group_by(Log_NR) %>%
summarise(Last_Temperature = round(last(temperature), digits = 2))
# Show measurements on a map
offline_stations <- c()
meta_1 <- as.tibble(read_delim('Messnetz_Thun_Steffisburg_Uebersicht.csv', delim = ';'))
meta_1 <- subset(meta_1, select = -c(Nr_Strassenlaterne, LCZ))
meta_1$Log_NR <- as.numeric(meta_1$Log_NR)
meta_2 <- as.tibble(read_delim('MetadatenBern.csv', delim = ','))
meta_2 <- rename(meta_2, NORD_CHTOPO = Latitude)
meta_2 <- rename(meta_2, OST_CHTOPO = Longitude)
meta_2 <- subset(meta_2, select = -c(STANDORT_NEU, Doppel_Messnetz_23, New))
meta_2$Log_NR <- as.numeric(meta_2$Log_NR)
meta <- bind_rows(meta_1, meta_2)
meta <- meta |>
select(c("Log_NR", "NORD_CHTOPO", "OST_CHTOPO"))
for (log_nr in meta$Log_NR)
if (!(log_nr %in% result$Log_NR) && !(log_nr %in% offline_stations))
offline_stations <- c(offline_stations, log_nr)
offline_meta <- meta |>
filter(Log_NR %in% offline_stations)
online_meta <- meta |>
filter(!(Log_NR %in% offline_stations))
online_meta <- merge(online_meta, latest_temperatures, by = "Log_NR")
bbox <- list(min_lon = 7.583333, min_lat = 46.716667, max_lon = 7.65, max_lat = 46.766667)
pal <- colorNumeric(palette = c("blue", "lightblue", "white", "orange", "red"), domain = online_meta$Last_Temperature)
leaflet() |>
addTiles() |>
fitBounds(lng1 = bbox$min_lon, lat1 = bbox$min_lat, lng2 = bbox$max_lon, lat2 = bbox$max_lat) |>
addCircleMarkers(
data = online_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~paste(Last_Temperature, "°C"),
radius = 6,
color = "black",
fillColor = ~pal(Last_Temperature),
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2) |>
addLegend(
pal = pal,
values = ~Last_Temperature,
opacity = 0.7,
title = "Temperatur (°C)",
position = "topright") |>
addCircleMarkers(
data = offline_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~Log_NR,
radius = 4,
color = "black",
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2)
runApp()
traceback()
runApp()
runApp()
runApp()
runApp()
View(result)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(usethis)
usethis::use_git_config(user.name="Mtta08", user.email="mattia08@bluewin.ch")
source("load_packages.R")
packages <- c("jsonlite", "leaflet", "osmdata", "sf", 'tidyverse', 'influxdbclient', 'doParallel', 'Metrics')
load_packages(packages)
source("get_data.R")
source("read_biel.R")
result_with_biel <- bind_rows(result, data_biel)
latest_temperatures <- result %>%
group_by(Log_NR) %>%
summarise(Last_Temperature = round(last(temperature), digits = 2)) |>
arrange(Log_NR)
offline_stations <- c()
meta_1 <- as.tibble(read_delim('Messnetz_Thun_Steffisburg_Uebersicht.csv', delim = ';'))
meta_1 <- subset(meta_1, select = -c(Nr_Strassenlaterne, LCZ))
meta_1$Log_NR <- as.numeric(meta_1$Log_NR)
meta_2 <- as.tibble(read_delim('MetadatenBern.csv', delim = ','))
meta_2 <- rename(meta_2, NORD_CHTOPO = Latitude)
meta_2 <- rename(meta_2, OST_CHTOPO = Longitude)
meta_2 <- subset(meta_2, select = -c(STANDORT_NEU, Doppel_Messnetz_23, New))
meta_2$Log_NR <- as.numeric(meta_2$Log_NR)
# meta_3 <- as.tibble(read_delim('Metadaten_Biel.csv', delim = ','))
# meta_3$Log_NR <- as.numeric(meta_3$Log_NR)
# meta_2 <- bind_rows(meta_2, meta_3)
meta <- bind_rows(meta_1, meta_2)
for (log_nr in meta$Log_NR)
if (!(log_nr %in% result$Log_NR) && !(log_nr %in% offline_stations))
offline_stations <- c(offline_stations, log_nr)
offline_meta <- meta %>%
filter(Log_NR %in% offline_stations) |>
arrange(Log_NR)
online_meta <- meta %>%
filter(!(Log_NR %in% offline_stations)) |>
arrange(Log_NR)
bbox <- list(min_lon = 7.583333, min_lat = 46.716667, max_lon = 7.65, max_lat = 46.766667)
pal <- colorNumeric(palette = c("blue", "lightblue", "white", "orange", "red"), domain = latest_temperatures$Last_Temperature)
leaflet() |>
addTiles() |>
fitBounds(lng1 = bbox$min_lon, lat1 = bbox$min_lat, lng2 = bbox$max_lon, lat2 = bbox$max_lat) |>
addCircleMarkers(
data = online_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~paste(latest_temperatures$Last_Temperature, "°C"),
radius = 6,
color = "black",
fillColor = ~pal(latest_temperatures$Last_Temperature),
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2) |>
addLegend(
pal = pal,
values = latest_temperatures$Last_Temperature,
opacity = 0.7,
title = "Temperatur (°C)",
position = "topright") |>
addCircleMarkers(
data = offline_meta,
~OST_CHTOPO, ~NORD_CHTOPO,
label = ~Log_NR,
radius = 4,
color = "black",
fill = TRUE,
stroke = TRUE,
fillOpacity = 1,
weight = 2)
